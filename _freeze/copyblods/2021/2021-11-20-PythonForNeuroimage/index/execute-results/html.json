{
  "hash": "739b1e1b713139b28903aefee2c57b51",
  "result": {
    "markdown": "---\ntitle: Python for Neuroimage data\nauthor: 桑峰\ndate: 2021-11-20\nslug: blog\noutput: html_document\ncategories:\n  - Summary\ntags:\n  - python\n  - neuroimage\n  - pydicom\n  - nipype\n  - nibabel\n  - nilearn\n---\n\n\n# DICOM文件\n\nDICOM格式是医学成像设备输出的统一的文件格式，它包含数据头信息和数据信息两部分。其中头信息包含扫描设备的信息以及被试的信息等，另外还包括其他关于数据的元信息。数据部分是扫描设备采集到扫描物体的信号值。\n\n利用Pydicom包可以使用Python操作DICOM文件，包括对DICOM文件的读写、头信息的增删改等。\n\n## 安装\n\n``` {.bash}\npip install pydicom\n# 或\nconda install -c conda-forge pydicom\n```\n\n## 示例数据\n\n``` {.python}\nfrom pydicom.data import get_testdata_file\nfpath = get_testdata_file(\"CT_small.dcm\")\nfpath\n```\n\nOut: '/Applications/miniconda3/lib/python3.9/site-packages/pydicom/data/test_files/CT_small.dcm'\n\n## 读入文件\n\n```python\nfrom pydicom import dcmread\nds = dcmread(fpath)\nds\n```\n\n输出：\n\n```\nDataset.file_meta -------------------------------\n(0002, 0000) File Meta Information Group Length  UL: 192\n(0002, 0001) File Meta Information Version       OB: b'\\x00\\x01'\n(0002, 0002) Media Storage SOP Class UID         UI: CT Image Storage\n(0002, 0003) Media Storage SOP Instance UID      UI: 1.3.6.1.4.1.5962.1.1.1.1.1.20040119072730.12322\n(0002, 0010) Transfer Syntax UID                 UI: Explicit VR Little Endian\n(0002, 0012) Implementation Class UID            UI: 1.3.6.1.4.1.5962.2\n(0002, 0013) Implementation Version Name         SH: 'DCTOOL100'\n(0002, 0016) Source Application Entity Title     AE: 'CLUNIE1'\n...\n```\n\n## 访问数据的子元素\n\n可以通过两种方式访问ds中的元素，其一是利用元素的位置，即每个元素中最前面的两个两位十六进制数，如(0x0043, 0x104e)；其二是利用元素的名称访问。下面对三种方式分别进行演示。\n\n### 按位置访问\n\n```python\nelem = ds[0x0008, 0x0008]\nelem\n```\nOut: (0008, 0008) Image Type                          CS: ['ORIGINAL', 'PRIMARY', 'AXIAL']\n\n### 按名称访问\n\n```python\nelem = ds['ImageType']\nelem\n```\nOut: (0008, 0008) Image Type                          CS: ['ORIGINAL', 'PRIMARY', 'AXIAL']\n\n### 访问元素的值\n\n```python\nval = ds.ImageType\nval\n\nval = ds['ImageType'].value\nval\n```\n\nOut: ['ORIGINAL', 'PRIMARY', 'AXIAL']\n\n### 嵌套元素\n\n头信息中包含部分嵌套的元素，这些元素的子元素不能通过位置和名称直接访问，得先获取到嵌套元素后，再按照类似数组的方式访问它里面的元素。\n\n```python\nnelem = ds['OtherPatientIDsSequence']\nnelem\n```\nOut: <Sequence, length 2>\n\n\n```python\nnelem[0]\n````\n\nOut: (0010, 0020) Patient ID                          LO: 'ABCD1234'\n\n(0010, 0022) Type of Patient ID                  CS: 'TEXT'\n\n\n## 修改元素\n\n```python\nnelem[0]['PatientID'].value = 'TestDemo'\n# 或\nnelem[0].PatientID = 'TestDemo'\n```\n\n## 删除元素\n\n```python\ndel ds[0x0028, 0x1050]\n# 或\ndel ds['PatientID']\n```\n\n## 增加元素\n\n```python\nds.add_new([0x0028, 0x1050], 'DS', \"100.0\")\n# 或\nds.WindowWidth = 500\n```\n\n## 保存文件\n\n```python\nds.save_as('Test.dcm')\n```\n\n# NIFTI文件\n\n## 安装\n\n```bash\npip install nibabel\n```\n\n## 数据获取\n\n以下代码会自动下载示例数据到nibabel的目录下。\n\n```python\nimport os\nimport numpy as np\nfrom nibabel.testing import data_path\nexample_file = os.path.join(data_path, 'example4d.nii.gz')\nexample_file\n```\nOut: '/Applications/miniconda3/lib/python3.9/site-packages/nibabel/tests/data/example4d.nii.gz'\n\n## 数据读取\n\n```python\nimport nibabel as nib\n\nimg = nib.load(example_file)\nimg\n```\nOut: <nibabel.nifti1.Nifti1Image at 0x7fd908af12b0>\n\n这里的img就是Nifti文件本身，通过它可以访问到文件的头信息和数据矩阵。\n\n## 数据头信息\n\n```python\nheader = img.header\nheader\nprint(header)\n```\nOut: <nibabel.nifti1.Nifti1Header at 0x7fd908af1460>\n```\n<class 'nibabel.nifti1.Nifti1Header'> object, endian='<'\nsizeof_hdr      : 348\ndata_type       : b''\ndb_name         : b''\nextents         : 0\nsession_error   : 0\nregular         : b'r'\ndim_info        : 57\ndim             : [  4 128  96  24   2   1   1   1]\nintent_p1       : 0.0\nintent_p2       : 0.0\nintent_p3       : 0.0\nintent_code     : none\ndatatype        : int16\nbitpix          : 16\nslice_start     : 0\npixdim          : [-1.000000e+00  2.000000e+00  2.000000e+00  2.199999e+00  2.000000e+03\n  1.000000e+00  1.000000e+00  1.000000e+00]\nvox_offset      : 0.0\n...\n```\n\n## 数据矩阵\n\n```python\ndata = img.get_fdata()\ndata.shape\n```\nOut: (128, 96, 24, 2)\n\n数据矩阵可以执行矩阵的运算等操作，可通过numpy包进行执行相关操作。\n\nimg对象的slicer方法可以选择特定层的数据，并返回一个img对象。\n\n```python\nimg_slice = img.slicer[32:-32, ...]\nimg_slice.shape\n```\nOut: (64, 96, 24, 2)\n\nimg包含一个标识矩阵方向与实际空间中方向的矩阵，较affine矩阵，可通过img.affine访问。\n\n通过函数nib.orientations.aff2axcodes(img.affine)可返回affine对应的实际空间中的方向。具体的信息请参考：https://sangfengchn.github.io/home/post/2021/06/02/blog/\n\n上面函数的返回信息为：('L', 'A', 'S')，表示矩阵x轴的正方向为被试的左边，矩阵y轴的正方向为被试的前面，z轴正方向表示被试的下面。详细描述：https://nipy.org/nibabel/coordinate_systems.html#nibabel-always-uses-an-ras-output-space\n\n## 保存\n\n```python\nimg_slice.to_filename('TestNifti.nii.gz')\n# 或\nimg_save = nib.Nifti1Image(data, img.affine)\nnib.save(img_save, 'TestNifti2.nii.gz')\n```\n\n# 可视化\n\nnilearn提供了较为完备的可视化功能，同时也提供了统计功能。这里只介绍它的可视化功能。\n\n## 加载数据\n\n```python\nfrom nilearn import datasets\n\n# one motor contrast map from NeuroVault\nmotor_images = datasets.fetch_neurovault_motor_task()\nstat_img = motor_images.images[0]\nstat_img\n```\nOut: '/Users/xxxx/nilearn_data/neurovault/collection_658/image_10426.nii.gz'\n\n## 演示一：激活图\n\n```python\nfrom nilearn import plotting\n\nplotting.plot_stat_map(stat_img, threshold=3, title=\"plot_stat_map\", cut_coords=[36, -27, 66])\n```\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](./img/fig_03.png){width=270}\n:::\n:::\n\n\n## 演示二：交互激活图\n\n```python\nplotting.view_img(stat_img, threshold=3)\n```\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](./img/fig_04.png){width=570}\n:::\n:::\n\n\n## 演示三：玻璃脑\n\n```python\nplotting.plot_glass_brain(stat_img, title='plot_glass_brain', threshold=3)\n```\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](./img/fig_05.png){width=244}\n:::\n:::\n\n\n\n## 演示四：结构像\n\n```python\nplotting.plot_anat('sub-1000199_ses-1_proc-facemask_T1w.nii.gz', title=\"plot_anat\")\n```\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](./img/fig_06.png){width=244}\n:::\n:::\n\n\n# 数据分析\n\nnipype提供了常用神经影像分析工具包的接口，包括FSL、FreeSurfer、ANTs等。\n\n这里以ANTs去除非脑组织为例。ANTs去非脑组织的过程是通过配准来实现的，需要事先提供[带颅骨的模版](file://./file/T_template0.nii.gz)和只包含[脑组织的模版](file://./file/T_template0_BrainCerebellumMask.nii.gz)。\n\n```python\nimport os\nfrom nipype.interfaces.ants.segmentation import BrainExtraction\n\nanatomical_image = 'sub-1000199_ses-1_proc-facemask_T1w.nii.gz'\ntemplate = 'MICCAI2012-Multi-Atlas-Challenge-Data/T_template0.nii.gz'\nbrainmask = 'MICCAI2012-Multi-Atlas-Challenge-Data/T_template0_BrainCerebellumMask.nii.gz'\nout_prefix = 'sub-1000199_ses-1_T1w_seg-brain'\n\nbrain_extraction = BrainExtraction(\n    dimension=3,\n    anatomical_image=anatomical_image,\n    brain_template=template,\n    brain_probability_mask=brainmask,\n    out_prefix = out_prefix,\n    num_threads=32)\n\nbrain_extraction.run()\n```\n\n原始图像：\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](./img/fig_01.png){width=1574}\n:::\n:::\n\n\n结果图像：\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](./img/fig_02.png){width=1574}\n:::\n:::\n\n\n另外，nipype还提供了处理流程图（workflow engine），可以方便地将不同处理工具整合进一个处理流程里面。官方文档提供了DTI、fMRI和sMRI部分处理的例子。\n\n# 参考\n\n1. pydicom: https://pydicom.github.io\n\n2. nibabel: https://nipy.org/nibabel/\n\n3. nilearn: https://nilearn.github.io/stable/index.html\n\n4. nipype: https://nilearn.github.io/stable/index.html",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}