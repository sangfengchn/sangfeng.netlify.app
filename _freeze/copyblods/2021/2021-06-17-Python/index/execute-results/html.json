{
  "hash": "bdd0e93aacf1d9c010cc08ae9a49a31b",
  "result": {
    "markdown": "---\ntitle: Python函数参数中的“*”\nauthor: 桑峰\ndate: 2021-06-17\nslug: blog\noutput: html_document\ncategories:\n  - Python\ntags:\n  - Python\n---\n\n\nPython中，*除了可用于乘法和乘方运算外，还可以把它放在函数形式参数的前面，用来传递多个参数或进行参数的拆解。下面简单介绍后者的用法。\n\n# 传递多参数\n\n### 示例1 {#demo1}\n\n```python\ndef f(*x):\n    print(x)\n\nf(1, 2, 3, 4)\n```\n输出：(1, 2, 3, 4)\n\n可见，虽然在定义函数**f()**时，只用了一个形式参数x，但是由于*的存在，再调用该函数时，即便是传递多个参数，也会把多个参数当成一个变量x（这里当作元组处理）来处理。\n\n### 示例2 {#demo2}\n\n```python\ndef f(**x):\n    print(x)\n    \nf(a=1, b=2, c=3, d=4)\n```\n\n输出：{'a': 1, 'b': 2, 'c': 3, 'd': 4}\n\n\\*\\*也可以接收多个参数，但是跟\\*不同的是，\\*\\*接收带有key的参数，并且将多个key-value形式的参数转换成为一个字典。\n\n# 拆分参数 {#demo3}\n\n```python\ndef f(*x):\n    print(x)\n\n# Test 1\nf(1, 2)\n# Test 2\nf((1, 2))\n# Test 3\nf(*(1, 2))\n```\n三次调用的输出分别为：\n\nTest 1: (1, 2)\nTest 2: ((1, 2),)\nTest 3: (1, 2)\n\nTest 1的结果跟{#demo1}一样，此时的x为两个参数构成的元组。Test 2输入参数变成了一个由两个元素构成的元组，此时的x把这个元组当成一个整体作为它的第一个元素，形成了一个新的元组。Test 3在传递参数时，前面添加了*，此时函数f中的x为输入的元组本身，效果与Test 1相同。\n\n### 参考\n\n[1] https://zhuanlan.zhihu.com/p/93656773",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}